<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>uniapp兼容问题</title>
    <url>/2020/01/27/uniapp%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p><a href="https://uniapp.dcloud.io/"><img src="/images/uniapp-logo.png" alt="作者头像"></a></p>
<a id="more"></a>

<h1 id="组件兼容写法问题"><a href="#组件兼容写法问题" class="headerlink" title="组件兼容写法问题"></a><em>组件兼容写法问题</em></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.全局的page：再支付宝小程序上打包后页面的最外层没有page组件，所以再设置页面高度</span><br><span class="line">  为100%时并不是手机屏幕的高度，而是元素的高度，其他程序正常;</span><br><span class="line">  </span><br><span class="line">2.scroll-view组件再设置竖向滚动时，在百度小程序上使用触底加载只会执行一次，使用</span><br><span class="line">  page方法来实现此效果;</span><br><span class="line">  </span><br><span class="line">3.使用遮罩层在百度小程序上一定要加page的背景色，否则页面样式会穿透;</span><br><span class="line"></span><br><span class="line">4.公共的组件写在components中，注意：公共组件的周期采用的是vue的周期，pages下面</span><br><span class="line">  的页面周期采用的是小程序的生命周期方式开发;</span><br><span class="line">  </span><br><span class="line">5.阻止事件冒泡可以使用vue的方式等：@click.stop&#x3D;事件名称;</span><br><span class="line"></span><br><span class="line">6.事件绑定：即便使用条件编译组件也不支持小程序的catch和bind，都要使用@去绑定;</span><br><span class="line"></span><br><span class="line">7.App.vue：相当于小程序的app.js，是程序的主入口;</span><br><span class="line"></span><br><span class="line">8.form：在小程序上button绑定的data-只有再小程序上才可以获取到;</span><br><span class="line"></span><br><span class="line">9.Map：controltap 控件点击事件不执行，验证了微信小程序也不执行，微信这个事件</span><br><span class="line">  出现了问题;</span><br></pre></td></tr></table></figure>


<h1 id="接口兼容问题"><a href="#接口兼容问题" class="headerlink" title="接口兼容问题"></a><em>接口兼容问题</em></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.获取系统信息的接口再百度小程序上会慢一些，建议设置一个延时获取，同时做好空</span><br><span class="line">  的return;</span><br><span class="line">	</span><br><span class="line">2.页面使用触底加载更多建议再底部增加一个空的view，例如：30upx的view，这样触</span><br><span class="line">  底加载更多会更灵敏一些，否则再百度和支付宝小程序上触底不灵敏;</span><br></pre></td></tr></table></figure>


<h1 id="主要逻辑"><a href="#主要逻辑" class="headerlink" title="主要逻辑"></a><em>主要逻辑</em></h1><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.定位：每次程序从后台到前台都会更新当前定位信息;</span><br><span class="line"></span><br><span class="line">2.网络请求：接口和api统一封装在net下，文件的名字是该接口功能的概要，再net下只</span><br><span class="line">  需要继承初始化的父类然后去实现对应的接口名和域名即可（由于项目中有很多域名所</span><br><span class="line">  以没办法采用一个，只能去单独配置每个接口所需的域名）;</span><br><span class="line">	</span><br><span class="line">3.Model：数据会储存在model中，父类会实现基本的setModel和getModel方法，在子类</span><br><span class="line">  只需要去实现对应的Model的key以及是否需要存入内存中，会先显示model的数据同时</span><br><span class="line">  去请求net更新model（之所以会把key写在model是为了避免时间久了key的乱用导致项</span><br><span class="line">  目的缓存混乱）;</span><br><span class="line"></span><br><span class="line">4.分包：分包的写法和微信小程序是一致的，当前版本只有微信小程序支持分包;</span><br><span class="line"></span><br><span class="line">5.公共css引入：公共的通用css可以在App.vue中引入;</span><br><span class="line"></span><br><span class="line">6.通知：程序中主要使用了发送通知、注册通知、反注册通知的逻辑，例如：筛选功能，</span><br><span class="line">  点击后只会发送对应的通知然后相关的页面去监听对应的通知去做出相应的变化，而不</span><br><span class="line">  是直接去调用，做到模块之间的彻底分离;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>uniapp</tag>
        <tag>vue</tag>
      </tags>
  </entry>
  <entry>
    <title>命令工具</title>
    <url>/2020/01/27/%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h1 id="hexo操作指南"><a href="#hexo操作指南" class="headerlink" title="hexo操作指南"></a>hexo操作指南</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo new <span class="string">""</span>   创建文件</span><br><span class="line">hexo clean    先清除（避免之前的主题和public混在一起）</span><br><span class="line">hexo g        生成静态页面</span><br><span class="line">hexo s        启动本地服务器进行查看</span><br><span class="line">hexo d        查看后没有问题即可部署到github上</span><br></pre></td></tr></table></figure>
<a id="more"></a>



<h1 id="cygwin"><a href="#cygwin" class="headerlink" title="cygwin"></a>cygwin</h1><p><strong>1.增加文件</strong><br>touch 文件名</p>
<p><strong>2.删除文件</strong><br>rm file_name<br>rmdir file_name<br>rm -fr file_name</p>
<p><strong>3.增加文件名</strong><br>mkdir 文件名</p>
<p><code>4.使用webstorm 编写 需要将右下角设置成 适应于windows的编写</code></p>
<p><code>5.使用命令行编写 vi 文件位置 —&gt; :wq! 保存并退出编写模式</code></p>
<p><code>6.命令行操作 Backspace 跳出编写模式 i在光标前插入 a在光标后插入</code></p>
<p><strong>7.check history command</strong><br>history</p>
<p><strong>8.cd command</strong><br>1.cd          命令返回到默认路径<br>2.cd -        切换到刚才的路径</p>
<p><strong>9.当前文件</strong><br>.</p>
<p><strong>10.cp command</strong><br>cp -av file_name new_file_name<br>将整个目录复制，两目录完全一样</p>
<p>cp -fr file_name new_file<br>将整个目录复制，并且是以非链接方式复制，当source目录带有符号链接时，两个目录不相同</p>
<p><strong>11.change name</strong><br>mv old_name new_name</p>
<h1 id="shell"><a href="#shell" class="headerlink" title="shell"></a>shell</h1><pre><code>1.使用webstorm 编写 需要将右下角设置成 适应于windows的编写；
2.使用命令行编写 vi 文件位置 —&gt; :wq! 保存并退出编写模式；
3.命令行操作 Backspace 跳出编写模式 i在光标前插入 a在光标后插入  
  h j k l 操作光标移动  x 删除  dd 删除一行
4.增加权限：    
  chmod 777 ./config.sh</code></pre><h1 id="vim"><a href="#vim" class="headerlink" title="vim"></a>vim</h1><pre><code>  1.打开文件：
      vim file_name

2.在vim中打开一个新文件：
      :open file_name

3.在新窗口中打开文件:
      :split file_name

4.查看当前打开的文件列表，当前正在编辑的文件会用[]括起来:
      :args

5.打开远程文件，比如ftp或者share folder：
      :e ftp://192.168.10.76/abc.txt
      :e \\qadrive\test\1.txt

6.插入命令：
    i 在当前位置生前插入
      I 在当前行首插入
      a 在当前位置后插入
      A 在当前行尾插入
      o 在当前行之后插入一行
      O 在当前行之前插入一行

7.查找命令：
      /text　　查找text，按n健查找下一个，按N健查找前一个。
      ?text　　查找text，反向查找，按n健查找下一个，按N健查找前一个。
      vim中有一些特殊字符在查找时需要转义　　.*[]^%/?~$
      :set ignorecase　　忽略大小写的查找
      :set noignorecase　　不忽略大小写的查找
      查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。
      :set hlsearch　　高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。
      :set nohlsearch　　关闭高亮搜索显示
      :nohlsearch　　关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。
      :set incsearch　　逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。
      :set wrapscan　　重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。

8.替换命令：
      ra 将当前字符替换为a，当期字符即光标所在字符。
      s/old/new/ 用old替换new，替换当前行的第一个匹配
      s/old/new/g 用old替换new，替换当前行的所有匹配
      %s/old/new/ 用old替换new，替换所有行的第一个匹配
      %s/old/new/g 用old替换new，替换整个文件的所有匹配
      :10,20 s/^/    /g 在第10行知第20行每行前面加四个空格，用于缩进。
      ddp 交换光标所在行和其下紧邻的一行。

9.移动命令：
      h 左移一个字符
      l 右移一个字符，这个命令很少用，一般用w代替。
      k 上移一个字符
      j 下移一个字符
      以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！&lt;Esc&gt;，这里的Esc是必须的，否则命令不生效。
      w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。
      b 向后移动一个单词 2b 向后移动2个单词
      e，同w，只不过是光标停在单词尾部
      ge，同b，光标停在单词尾部。
      ^ 移动到本行第一个非空白字符上。
      0（数字0）移动到本行第一个字符上，
      &lt;HOME&gt; 移动到本行第一个字符。同0健。
      $ 移动到行尾 3$ 移动到下面3行的行尾
      gg 移动到文件头。 = [[
      G（shift + g） 移动到文件尾。 = ]]
      f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。
      F 同f，反向查找。
      跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。
      Ctrl + e 向下滚动一行
      Ctrl + y 向上滚动一行
      Ctrl + d 向下滚动半屏
      Ctrl + u 向上滚动半屏
      Ctrl + f 向下滚动一屏
      Ctrl + b 向上滚动一屏

10.撤销和重做：
      u 撤销（Undo）
      U 撤销对整行的操作
      Ctrl + r 重做（Redo），即撤销的撤销。

11.删除命令：
      x 删除当前字符
      3x 删除当前光标开始向后三个字符
      X 删除当前字符的前一个字符。X=dh
      dl 删除当前字符， dl=x
      dh 删除前一个字符
      dd 删除当前行
      dj 删除上一行
      dk 删除下一行
      10d 删除当前行开始的10行。
      D 删除当前字符至行尾。D=d$
      d$ 删除当前字符之后的所有字符（本行）
      kdgg 删除当前行之前所有行（不包括当前行）
      jdG（jd shift + g）   删除当前行之后所有行（不包括当前行）
      :1,10d 删除1-10行
      :11,$d 删除11行及以后所有的行
      :1,$d 删除所有行
      J(shift + j)　　删除两行之间的空行，实际上是合并两行。

12.拷贝和粘贴：
      yy 拷贝当前行
      nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。
      p  在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。
      shift+p 在当前行前粘贴
      :1,10 co 20 将1-10行插入到第20行之后。
      :1,$ co $ 将整个文件复制一份并添加到文件尾部。
      正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制
      ddp交换当前行和其下一行
      xp交换当前字符和其后一个字符

13.剪切命令：
      正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切
      ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴
      :1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。
      :1, 10 m 20 将第1-10行移动到第20行之后。

14.退出命令：
      :wq 保存并退出
      ZZ 保存并退出
      :q! 强制退出并忽略所有更改
      :e! 放弃所有修改，并打开原来文件。
       15.窗口命令：
      :split或new 打开一个新窗口，光标停在顶层的窗口上
      :split file或:new file 用新窗口打开文件
      split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。
      Ctrl+ww 移动到下一个窗口
      Ctrl+wj 移动到下方的窗口
      Ctrl+wk 移动到上方的窗口

  15.关闭窗口
      :close 最后一个窗口不能使用此命令，可以防止意外退出vim。
      :q 如果是最后一个被关闭的窗口，那么将退出vim。
      ZZ 保存并退出。

      关闭所有窗口，只保留当前窗口
      :only

      录制宏
      按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。

16.执行shell命令：
      :!command
      :!ls 列出当前目录下文件
      :!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。
      :!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。
      :suspend或Ctr - Z 挂起vim，回到shell，按fg可以返回vim。

17.注释命令：
      perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入#
      3,5 s/^/#/g 注释第3-5行
      3,5 s/^#//g 解除3-5行的注释
      1,$ s/^/#/g 注释整个文档。
      :%s/^/#/g 注释整个文档，此法更快。

18.帮助命令：
      :help or F1 显示整个帮助
      :help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。
      :help &apos;number&apos; Vim选项的帮助用单引号括起
      :help &lt;Esc&gt; 特殊键的帮助用&lt;&gt;扩起
      :help -t Vim启动参数的帮助用-
      ：help i_&lt;Esc&gt; 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式
      帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回

  19.其他非编辑命令：
      . 重复前一次命令
      :set ruler?　　查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看
      :scriptnames　　查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。
      :set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs=tab:&gt;-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。

      在Windows系统上
      :help tutor
      :syntax 列出已经定义的语法项
      :syntax clear 清除已定义的语法规则
      :syntax case match 大小写敏感，int和Int将视为不同的语法元素
      :syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案</code></pre>]]></content>
      <categories>
        <category>命令</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>cygwin</tag>
        <tag>shell</tag>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>js常见问题</title>
    <url>/2020/01/27/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="break-和-continue"><a href="#break-和-continue" class="headerlink" title="break 和 continue"></a>break 和 continue</h3><p>break 语句可以立即退出循环，阻止再次反复执行任何代码。</p>
<p>continue 语句只是退出当前循环，根据控制表达式还允许继续进行下一次循环</p>
<p>与有标签的语句一起使用:<br>  break 语句和 continue 语句都可以与有标签的语句联合使用，返回代码中的特定位置。</p>
<a id="more"></a>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> iNum = <span class="number">0</span>;</span><br><span class="line">outermost:</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; i++) &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> j=<span class="number">0</span>; j&lt;<span class="number">10</span>; j++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (i == <span class="number">5</span> &amp;&amp; j == <span class="number">5</span>) &#123;</span><br><span class="line">      <span class="keyword">break</span> outermost;</span><br><span class="line">    &#125;</span><br><span class="line">            </span><br><span class="line">    iNum++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">alert(iNum); <span class="comment">//输出 "55"</span></span><br></pre></td></tr></table></figure>

<h3 id="arguments-对象"><a href="#arguments-对象" class="headerlink" title="arguments 对象"></a>arguments 对象</h3><p>在函数代码中，使用特殊对象 arguments，无需明确指出参数名访问    </p>
<p>1.检测参数个数<br>      arguments.length</p>
<p>2.模拟函数重载</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">1</span>) &#123;</span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="number">5</span>);</span><br><span class="line">  &#125; </span><br><span class="line">  <span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">arguments</span>.length == <span class="number">2</span>) &#123;</span><br><span class="line">    alert(<span class="built_in">arguments</span>[<span class="number">0</span>] + <span class="built_in">arguments</span>[<span class="number">1</span>]);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">	 </span><br><span class="line">doAdd(<span class="number">10</span>);<span class="comment">//输出 "15"</span></span><br><span class="line">doAdd(<span class="number">40</span>, <span class="number">20</span>);<span class="comment">//输出 "60"</span></span><br></pre></td></tr></table></figure>

<p>3.Function 对象<br>1.length 属性<br>函数属于引用类型，所以也有属性和方法<br>ECMAScript 可以接受任意多个参数（最多 25 个）</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">iNum</span>) </span>&#123;</span><br><span class="line">  alert(iNum + <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayHi</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  alert(<span class="string">"Hi"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">alert(doAdd.length);<span class="comment">//输出 "1"</span></span><br><span class="line">alert(sayHi.length);<span class="comment">//输出 "0"</span></span><br></pre></td></tr></table></figure>

<h3 id="Function-对象的方法"><a href="#Function-对象的方法" class="headerlink" title="Function 对象的方法"></a>Function 对象的方法</h3><p>Function 对象也有与所有对象共享的 valueOf() 方法和 toString() 方法。这两个方法返回的都是函数的源代码，在调试时尤其有用</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">iNum</span>) </span>&#123;</span><br><span class="line">	alert(iNum + <span class="number">10</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">document</span>.write(doAdd.toString());	</span><br><span class="line"><span class="comment">// 输出 </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAdd</span>(<span class="params">iNum</span>) </span>&#123;</span><br><span class="line">	alert(iNum + <span class="number">10</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="js对象"><a href="#js对象" class="headerlink" title="js对象"></a>js对象</h3><p>1.对象废除<br>    var oObject = new Object;<br>    // do something with the object here<br>    oObject = null;<br>    注意：废除对象的所有引用时要当心。如果一个对象有两个或更多引用，则要正确废除该对象，必须将其所有引用都设置为 null。<br>    每用完一个对象后，就将其废除，来释放内存，这是个好习惯。这样还确保不再使用已经不能访问的对象，从而防止程序设计错误的出现。</p>
<p>2.String 对象<br>    1).new String()  method: toString() , valueOf() , split() // 切分成数组<br>    2).查找某字符是否存在method:<br>      1.indexOf() , lastIndexOf()  如果没有找不到子串，则返回 -1 , 否则返回具体的位置。<br>      2.localeCompare()  判断字符串位置 （ 使用时判断是否大于、等于、小于 0 ）<br>    var oStringObject = new String(“yellow”);<br>    alert(oStringObject.localeCompare(“brick”));        //输出 “1”   字符串之后<br>    alert(oStringObject.localeCompare(“yellow”));        //输出 “0”   等于<br>    alert(oStringObject.localeCompare(“zoo”));        //输出 “-1”  字符串之前</p>
<p>3.slice() 和 substring()<br>    var oStringObject = new String(“hello world”);<br>    alert(oStringObject.slice(“3”));        //输出 “lo world”<br>    alert(oStringObject.substring(“3”));        //输出 “lo world”<br>    alert(oStringObject.slice(“3”, “7”));        //输出 “lo w”<br>    alert(oStringObject.substring(“3”, “7”));    //输出 “lo w”<br>  对于负数参数，slice() 方法会用字符串的长度加上参数，substring() 方法则将其作为 0 处理（也就是说将忽略它）。</p>
<p>4.判断类型  instanceof , typeOf<br>    var oStringObject = new String(“hello world”);<br>    alert(oStringObject instanceof String);    //输出 “true</p>
<p>5.Array 对象<br>    1).方法：<br>    concat()       // 连接两个或更多的数组，并返回结果。<br>    join()         // 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。<br>    push()         // 末尾添加新元素<br>    unshift()      // 开头增加新元素<br>    shift()        // 删除并返回数组的第一个元素<br>    pop()          // 删除并返回数组的最后一个元素<br>    slice()        // 从某个已有的数组返回选定的元素<br>    splice()       // 删除元素，并向数组添加新元素。<br>    sort()         // 对数组的元素进行排序<br>    reverse()      //     颠倒数组中元素的顺序。</p>
<p>6.boolean false的情况（false，0，“”，null，undefined和NaN ）</p>
<h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// var 作用域是 上层函数体(函数及作用域）</span></span><br><span class="line"><span class="comment">// let 作用域是 自身函数体（块及作用域)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; ++i) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"i="</span> + i);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; <span class="number">5</span>; ++j) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"j="</span> + j);</span><br><span class="line">  &#125;, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; <span class="number">5</span>; ++m) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"m="</span> + n);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">  &#125;)(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> m = <span class="number">0</span>; m &lt; <span class="number">5</span>; ++m) &#123;</span><br><span class="line">  (<span class="function"><span class="keyword">function</span>(<span class="params">n</span>)</span>&#123;</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">"m="</span> + m);</span><br><span class="line">    &#125;, <span class="number">1</span>);</span><br><span class="line">  &#125;)(m);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> k = <span class="number">0</span>; k &lt; <span class="number">5</span>; ++k) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">"k="</span> + k);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">let</span> l = <span class="number">0</span>; l &lt; <span class="number">5</span>; ++l) &#123;</span><br><span class="line">  setTimeout(<span class="function"><span class="params">()</span>=&gt;</span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"l="</span> + l);</span><br><span class="line">  &#125;, <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>web前端</category>
      </categories>
      <tags>
        <tag>javascript</tag>
      </tags>
  </entry>
  <entry>
    <title>svn使用技巧</title>
    <url>/2020/01/27/svn%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><h3 id="恢复"><a href="#恢复" class="headerlink" title="恢复"></a>恢复</h3><p>1.恢复一整个目录的文件<br>  svn revert -R .  （ . 代表当前 ）<br>2.丢弃对一个文件的修改：<br>    svn revert foo.c</p>
<a id="more"></a>

<h3 id="拉分支"><a href="#拉分支" class="headerlink" title="拉分支"></a>拉分支</h3><p>svn cp -r 需要拉到的版本号 -m “pull ios_5.0.0_10969_20171206” svn://116.62.100.209/panda/trunk/client/文件名  svn://116.62.100.209/panda/branches/release/文件名_版本_版本号_时间（例：ios_5.0.0_10969_20171206）</p>
<h3 id="合并版本-需-cd-到-当前分支"><a href="#合并版本-需-cd-到-当前分支" class="headerlink" title="合并版本(需 cd 到 当前分支)"></a>合并版本(需 cd 到 当前分支)</h3><p>svn merge -c 需要合并的版本号 svn://116.62.100.209/panda/trunk/client/文件名 .   （ . 代表 当前路径 ）<br>提交：merge from 版本号 trunk</p>
<p>反向合并：svn merge -c -需要合并的版本号 svn://116.62.100.209/panda/trunk/client/文件名 .   （ . 代表 当前路径 ）</p>
<h3 id="解决合并后的冲突"><a href="#解决合并后的冲突" class="headerlink" title="解决合并后的冲突"></a>解决合并后的冲突</h3><p>svn resolved path  （ 已过时 ）<br>svn resolved –accept mine-full path （ 1.5版本后，加上–accept参数，尝试自动处理冲突 ）</p>
<h3 id="添加文件"><a href="#添加文件" class="headerlink" title="添加文件"></a>添加文件</h3><p>svn add 文件名称<br>svn add *.js   （添加所有 .js 文件）</p>
<h3 id="提交代码"><a href="#提交代码" class="headerlink" title="提交代码"></a>提交代码</h3><p>svn ci -m’注释信息’ path<br>svn ci -m’注释信息’   ( 提交所有改动的代码 ) ( 可以不写注释 )</p>
<h3 id="更新到指定版本"><a href="#更新到指定版本" class="headerlink" title="更新到指定版本"></a>更新到指定版本</h3><p>svn up -r 版本号 path （ 将指定文件还原到指定的版本号 ）</p>
<h3 id="查看文件或者目录状态"><a href="#查看文件或者目录状态" class="headerlink" title="查看文件或者目录状态"></a>查看文件或者目录状态</h3><p>svn st -v path  （ 查看文件或者目录状态 最后 ）</p>
<h3 id="删除文件"><a href="#删除文件" class="headerlink" title="删除文件"></a>删除文件</h3><p>svn rm -m’注释’ path</p>
<h3 id="查看日志"><a href="#查看日志" class="headerlink" title="查看日志"></a>查看日志</h3><p>svn log path</p>
<h3 id="查看文件详细信息"><a href="#查看文件详细信息" class="headerlink" title="查看文件详细信息"></a>查看文件详细信息</h3><p>svn info path </p>
<h3 id="比较差异"><a href="#比较差异" class="headerlink" title="比较差异"></a>比较差异</h3><p>svn diff -r m:n path ( 比较 指定文件夹 m 和 n 版本的差异 )</p>
<h3 id="查看文件内容"><a href="#查看文件内容" class="headerlink" title="查看文件内容"></a>查看文件内容</h3><p>cat path</p>
<h3 id="修改文件内容"><a href="#修改文件内容" class="headerlink" title="修改文件内容"></a>修改文件内容</h3><p>vi path</p>
<h3 id="更改文件名称"><a href="#更改文件名称" class="headerlink" title="更改文件名称"></a>更改文件名称</h3><p>svn move old_path_name new_path_name</p>
<h3 id="常见状态"><a href="#常见状态" class="headerlink" title="常见状态"></a>常见状态</h3><font color=#ff5400>

<pre><code>&quot;&quot;  没有修改

&apos;A&apos;  新增  

&apos;D&apos;  删除

&apos;M&apos;  修改

&apos;R&apos;  替代

&apos;C&apos;  冲突  

&apos;I&apos;  忽略

&apos;?&apos;  未受控

&apos;!&apos;  丢失，一般是将受控文件直接删除导致</code></pre></font>


<h3 id="设置忽略文件"><a href="#设置忽略文件" class="headerlink" title="设置忽略文件"></a>设置忽略文件</h3><p>export SVN_EDITOR=vim<br>svn propedit svn:ignore 需要设置忽略的文件/文件夹   此时在vim中 输入需要忽略的文件夹名称即可</p>
<h3 id="查看最近几条日志"><a href="#查看最近几条日志" class="headerlink" title="查看最近几条日志"></a>查看最近几条日志</h3><p>svn log -l 10     (查看最近10条日志 l 是小写的 L)</p>
]]></content>
      <categories>
        <category>命令</category>
      </categories>
      <tags>
        <tag>svn</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo 操作指南</title>
    <url>/2019/12/20/hexo%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/</url>
    <content><![CDATA[<link rel="stylesheet" class="aplayer-secondary-style-marker" href="\assets\css\APlayer.min.css"><script src="\assets\js\APlayer.min.js" class="aplayer-secondary-script-marker"></script><p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<a id="more"></a>

<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server   简写:   hexo s</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate   简写:   hexo g</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy   简写:   hexo d</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
      <categories>
        <category>命令</category>
      </categories>
      <tags>
        <tag>hexo</tag>
      </tags>
  </entry>
</search>
