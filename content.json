{"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"","text":"title: categoriestype: categorieslayout: “categories”","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"命令工具","text":"hexo操作指南1234hexo clean 先清除（避免之前的主题和public混在一起）hexo g 生成静态页面hexo s 启动本地服务器进行查看hexo d 查看后没有问题即可部署到github上 cygwin1.增加文件touch 文件名 2.删除文件rm file_namermdir file_namerm -fr file_name 3.增加文件名mkdir 文件名 4.使用webstorm 编写 需要将右下角设置成 适应于windows的编写 5.使用命令行编写 vi 文件位置 —&gt; :wq! 保存并退出编写模式 6.命令行操作 Backspace 跳出编写模式 i在光标前插入 a在光标后插入 7.check history commandhistory 8.cd command1.cd 命令返回到默认路径2.cd - 切换到刚才的路径 9.当前文件. 10.cp commandcp -av file_name new_file_name将整个目录复制，两目录完全一样 cp -fr file_name new_file将整个目录复制，并且是以非链接方式复制，当source目录带有符号链接时，两个目录不相同 11.change namemv old_name new_name","link":"/2020/01/27/%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/"},{"title":"js常见问题","text":"break 和 continuebreak 语句可以立即退出循环，阻止再次反复执行任何代码。 continue 语句只是退出当前循环，根据控制表达式还允许继续进行下一次循环 与有标签的语句一起使用: break 语句和 continue 语句都可以与有标签的语句联合使用，返回代码中的特定位置。 123456789101112var iNum = 0;outermost:for (var i=0; i&lt;10; i++) { for (var j=0; j&lt;10; j++) { if (i == 5 &amp;&amp; j == 5) { break outermost; } iNum++; }}alert(iNum); //输出 \"55\" arguments 对象在函数代码中，使用特殊对象 arguments，无需明确指出参数名访问 1.检测参数个数 arguments.length 2.模拟函数重载 1234567891011function doAdd() { if(arguments.length == 1) { alert(arguments[0] + 5); } else if(arguments.length == 2) { alert(arguments[0] + arguments[1]); }} doAdd(10);//输出 \"15\"doAdd(40, 20);//输出 \"60\" 3.Function 对象1.length 属性函数属于引用类型，所以也有属性和方法ECMAScript 可以接受任意多个参数（最多 25 个） 12345678910function doAdd(iNum) { alert(iNum + 10);}function sayHi() { alert(\"Hi\");}alert(doAdd.length);//输出 \"1\"alert(sayHi.length);//输出 \"0\" Function 对象的方法Function 对象也有与所有对象共享的 valueOf() 方法和 toString() 方法。这两个方法返回的都是函数的源代码，在调试时尤其有用 123456789function doAdd(iNum) { alert(iNum + 10);}document.write(doAdd.toString()); // 输出 function doAdd(iNum) { alert(iNum + 10);} js对象1.对象废除 var oObject = new Object; // do something with the object here oObject = null; 注意：废除对象的所有引用时要当心。如果一个对象有两个或更多引用，则要正确废除该对象，必须将其所有引用都设置为 null。 每用完一个对象后，就将其废除，来释放内存，这是个好习惯。这样还确保不再使用已经不能访问的对象，从而防止程序设计错误的出现。 2.String 对象 1).new String() method: toString() , valueOf() , split() // 切分成数组 2).查找某字符是否存在method: 1.indexOf() , lastIndexOf() 如果没有找不到子串，则返回 -1 , 否则返回具体的位置。 2.localeCompare() 判断字符串位置 （ 使用时判断是否大于、等于、小于 0 ） var oStringObject = new String(“yellow”); alert(oStringObject.localeCompare(“brick”)); //输出 “1” 字符串之后 alert(oStringObject.localeCompare(“yellow”)); //输出 “0” 等于 alert(oStringObject.localeCompare(“zoo”)); //输出 “-1” 字符串之前 3.slice() 和 substring() var oStringObject = new String(“hello world”); alert(oStringObject.slice(“3”)); //输出 “lo world” alert(oStringObject.substring(“3”)); //输出 “lo world” alert(oStringObject.slice(“3”, “7”)); //输出 “lo w” alert(oStringObject.substring(“3”, “7”)); //输出 “lo w” 对于负数参数，slice() 方法会用字符串的长度加上参数，substring() 方法则将其作为 0 处理（也就是说将忽略它）。 4.判断类型 instanceof , typeOf var oStringObject = new String(“hello world”); alert(oStringObject instanceof String); //输出 “true 5.Array 对象 1).方法： concat() // 连接两个或更多的数组，并返回结果。 join() // 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。 push() // 末尾添加新元素 unshift() // 开头增加新元素 shift() // 删除并返回数组的第一个元素 pop() // 删除并返回数组的最后一个元素 slice() // 从某个已有的数组返回选定的元素 splice() // 删除元素，并向数组添加新元素。 sort() // 对数组的元素进行排序 reverse() // 颠倒数组中元素的顺序。 6.boolean false的情况（false，0，“”，null，undefined和NaN ） 作用域1234567891011121314151617181920212223242526272829303132333435363738// var 作用域是 上层函数体(函数及作用域）// let 作用域是 自身函数体（块及作用域)for(var i = 0; i &lt; 5; ++i) { console.log(\"i=\" + i);}for (var j = 0; j &lt; 5; ++j) { setTimeout(()=&gt;{ console.log(\"j=\" + j); }, 1);}for (var m = 0; m &lt; 5; ++m) { (function(n){ setTimeout(()=&gt;{ console.log(\"m=\" + n); }, 1); })(m);}for (var m = 0; m &lt; 5; ++m) { (function(n){ setTimeout(()=&gt;{ console.log(\"m=\" + m); }, 1); })(m);}for(let k = 0; k &lt; 5; ++k) { console.log(\"k=\" + k);}for (let l = 0; l &lt; 5; ++l) { setTimeout(()=&gt;{ console.log(\"l=\" + l); }, 1);}","link":"/2020/01/27/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"title":"svn使用技巧","text":"恢复1.恢复一整个目录的文件 svn revert -R . （ . 代表当前 ）2.丢弃对一个文件的修改： svn revert foo.c 拉分支svn cp -r 需要拉到的版本号 -m “pull ios_5.0.0_10969_20171206” svn://116.62.100.209/panda/trunk/client/文件名 svn://116.62.100.209/panda/branches/release/文件名_版本_版本号_时间（例：ios_5.0.0_10969_20171206） 合并版本(需 cd 到 当前分支)svn merge -c 需要合并的版本号 svn://116.62.100.209/panda/trunk/client/文件名 . （ . 代表 当前路径 ）提交：merge from 版本号 trunk 反向合并：svn merge -c -需要合并的版本号 svn://116.62.100.209/panda/trunk/client/文件名 . （ . 代表 当前路径 ） 解决合并后的冲突svn resolved path （ 已过时 ）svn resolved –accept mine-full path （ 1.5版本后，加上–accept参数，尝试自动处理冲突 ） 添加文件svn add 文件名称svn add *.js （添加所有 .js 文件） 提交代码svn ci -m’注释信息’ pathsvn ci -m’注释信息’ ( 提交所有改动的代码 ) ( 可以不写注释 ) 更新到指定版本svn up -r 版本号 path （ 将指定文件还原到指定的版本号 ） 查看文件或者目录状态svn st -v path （ 查看文件或者目录状态 最后 ） 删除文件svn rm -m’注释’ path 查看日志svn log path 查看文件详细信息svn info path 比较差异svn diff -r m:n path ( 比较 指定文件夹 m 和 n 版本的差异 ) 查看文件内容cat path 修改文件内容vi path 更改文件名称svn move old_path_name new_path_name 常见状态 &quot;&quot; 没有修改 &apos;A&apos; 新增 &apos;D&apos; 删除 &apos;M&apos; 修改 &apos;R&apos; 替代 &apos;C&apos; 冲突 &apos;I&apos; 忽略 &apos;?&apos; 未受控 &apos;!&apos; 丢失，一般是将受控文件直接删除导致 设置忽略文件export SVN_EDITOR=vimsvn propedit svn:ignore 需要设置忽略的文件/文件夹 此时在vim中 输入需要忽略的文件夹名称即可 查看最近几条日志svn log -l 10 (查看最近10条日志 l 是小写的 L)","link":"/2020/01/27/svn%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"title":"Hexo 操作指南","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server 简写: hexo s More info: Server Generate static files1$ hexo generate 简写: hexo g More info: Generating Deploy to remote sites1$ hexo deploy 简写: hexo d More info: Deployment","link":"/2019/12/20/hexo%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"cygwin","slug":"cygwin","link":"/tags/cygwin/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"svn","slug":"svn","link":"/tags/svn/"}],"categories":[]}