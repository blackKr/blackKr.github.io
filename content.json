{"pages":[{"title":"about","text":"","link":"/about/index.html"},{"title":"","text":"title: categoriestype: categorieslayout: “categories”","link":"/categories/index.html"},{"title":"tags","text":"","link":"/tags/index.html"}],"posts":[{"title":"uniapp兼容问题","text":"组件兼容写法问题1234567891011121314151617181920211.全局的page：再支付宝小程序上打包后页面的最外层没有page组件，所以再设置页面高度 为100%时并不是手机屏幕的高度，而是元素的高度，其他程序正常; 2.scroll-view组件再设置竖向滚动时，在百度小程序上使用触底加载只会执行一次，使用 page方法来实现此效果; 3.使用遮罩层在百度小程序上一定要加page的背景色，否则页面样式会穿透;4.公共的组件写在components中，注意：公共组件的周期采用的是vue的周期，pages下面 的页面周期采用的是小程序的生命周期方式开发; 5.阻止事件冒泡可以使用vue的方式等：@click.stop=事件名称;6.事件绑定：即便使用条件编译组件也不支持小程序的catch和bind，都要使用@去绑定;7.App.vue：相当于小程序的app.js，是程序的主入口;8.form：在小程序上button绑定的data-只有再小程序上才可以获取到;9.Map：controltap 控件点击事件不执行，验证了微信小程序也不执行，微信这个事件 出现了问题; 接口兼容问题123451.获取系统信息的接口再百度小程序上会慢一些，建议设置一个延时获取，同时做好空 的return; 2.页面使用触底加载更多建议再底部增加一个空的view，例如：30upx的view，这样触 底加载更多会更灵敏一些，否则再百度和支付宝小程序上触底不灵敏; 主要逻辑1234567891011121314151617181.定位：每次程序从后台到前台都会更新当前定位信息;2.网络请求：接口和api统一封装在net下，文件的名字是该接口功能的概要，再net下只 需要继承初始化的父类然后去实现对应的接口名和域名即可（由于项目中有很多域名所 以没办法采用一个，只能去单独配置每个接口所需的域名）; 3.Model：数据会储存在model中，父类会实现基本的setModel和getModel方法，在子类 只需要去实现对应的Model的key以及是否需要存入内存中，会先显示model的数据同时 去请求net更新model（之所以会把key写在model是为了避免时间久了key的乱用导致项 目的缓存混乱）;4.分包：分包的写法和微信小程序是一致的，当前版本只有微信小程序支持分包;5.公共css引入：公共的通用css可以在App.vue中引入;6.通知：程序中主要使用了发送通知、注册通知、反注册通知的逻辑，例如：筛选功能， 点击后只会发送对应的通知然后相关的页面去监听对应的通知去做出相应的变化，而不 是直接去调用，做到模块之间的彻底分离;","link":"/2020/01/27/uniapp%E5%85%BC%E5%AE%B9%E9%97%AE%E9%A2%98/"},{"title":"命令工具","text":"hexo操作指南12345hexo new \"\" 创建文件hexo clean 先清除（避免之前的主题和public混在一起）hexo g 生成静态页面hexo s 启动本地服务器进行查看hexo d 查看后没有问题即可部署到github上 cygwin1.增加文件touch 文件名 2.删除文件rm file_namermdir file_namerm -fr file_name 3.增加文件名mkdir 文件名 4.使用webstorm 编写 需要将右下角设置成 适应于windows的编写 5.使用命令行编写 vi 文件位置 —&gt; :wq! 保存并退出编写模式 6.命令行操作 Backspace 跳出编写模式 i在光标前插入 a在光标后插入 7.check history commandhistory 8.cd command1.cd 命令返回到默认路径2.cd - 切换到刚才的路径 9.当前文件. 10.cp commandcp -av file_name new_file_name将整个目录复制，两目录完全一样 cp -fr file_name new_file将整个目录复制，并且是以非链接方式复制，当source目录带有符号链接时，两个目录不相同 11.change namemv old_name new_name shell1.使用webstorm 编写 需要将右下角设置成 适应于windows的编写； 2.使用命令行编写 vi 文件位置 —&gt; :wq! 保存并退出编写模式； 3.命令行操作 Backspace 跳出编写模式 i在光标前插入 a在光标后插入 h j k l 操作光标移动 x 删除 dd 删除一行 4.增加权限： chmod 777 ./config.shvim 1.打开文件： vim file_name 2.在vim中打开一个新文件： :open file_name 3.在新窗口中打开文件: :split file_name 4.查看当前打开的文件列表，当前正在编辑的文件会用[]括起来: :args 5.打开远程文件，比如ftp或者share folder： :e ftp://192.168.10.76/abc.txt :e \\\\qadrive\\test\\1.txt 6.插入命令： i 在当前位置生前插入 I 在当前行首插入 a 在当前位置后插入 A 在当前行尾插入 o 在当前行之后插入一行 O 在当前行之前插入一行 7.查找命令： /text 查找text，按n健查找下一个，按N健查找前一个。 ?text 查找text，反向查找，按n健查找下一个，按N健查找前一个。 vim中有一些特殊字符在查找时需要转义 .*[]^%/?~$ :set ignorecase 忽略大小写的查找 :set noignorecase 不忽略大小写的查找 查找很长的词，如果一个词很长，键入麻烦，可以将光标移动到该词上，按*或#键即可以该单词进行搜索，相当于/搜索。而#命令相当于?搜索。 :set hlsearch 高亮搜索结果，所有结果都高亮显示，而不是只显示一个匹配。 :set nohlsearch 关闭高亮搜索显示 :nohlsearch 关闭当前的高亮显示，如果再次搜索或者按下n或N键，则会再次高亮。 :set incsearch 逐步搜索模式，对当前键入的字符进行搜索而不必等待键入完成。 :set wrapscan 重新搜索，在搜索到文件头或尾时，返回继续搜索，默认开启。 8.替换命令： ra 将当前字符替换为a，当期字符即光标所在字符。 s/old/new/ 用old替换new，替换当前行的第一个匹配 s/old/new/g 用old替换new，替换当前行的所有匹配 %s/old/new/ 用old替换new，替换所有行的第一个匹配 %s/old/new/g 用old替换new，替换整个文件的所有匹配 :10,20 s/^/ /g 在第10行知第20行每行前面加四个空格，用于缩进。 ddp 交换光标所在行和其下紧邻的一行。 9.移动命令： h 左移一个字符 l 右移一个字符，这个命令很少用，一般用w代替。 k 上移一个字符 j 下移一个字符 以上四个命令可以配合数字使用，比如20j就是向下移动20行，5h就是向左移动5个字符，在Vim中，很多命令都可以配合数字使用，比如删除10个字符10x，在当前位置后插入3个！，3a！&lt;Esc&gt;，这里的Esc是必须的，否则命令不生效。 w 向前移动一个单词（光标停在单词首部），如果已到行尾，则转至下一行行首。此命令快，可以代替l命令。 b 向后移动一个单词 2b 向后移动2个单词 e，同w，只不过是光标停在单词尾部 ge，同b，光标停在单词尾部。 ^ 移动到本行第一个非空白字符上。 0（数字0）移动到本行第一个字符上， &lt;HOME&gt; 移动到本行第一个字符。同0健。 $ 移动到行尾 3$ 移动到下面3行的行尾 gg 移动到文件头。 = [[ G（shift + g） 移动到文件尾。 = ]] f（find）命令也可以用于移动，fx将找到光标后第一个为x的字符，3fd将找到第三个为d的字符。 F 同f，反向查找。 跳到指定行，冒号+行号，回车，比如跳到240行就是 :240回车。另一个方法是行号+G，比如230G跳到230行。 Ctrl + e 向下滚动一行 Ctrl + y 向上滚动一行 Ctrl + d 向下滚动半屏 Ctrl + u 向上滚动半屏 Ctrl + f 向下滚动一屏 Ctrl + b 向上滚动一屏 10.撤销和重做： u 撤销（Undo） U 撤销对整行的操作 Ctrl + r 重做（Redo），即撤销的撤销。 11.删除命令： x 删除当前字符 3x 删除当前光标开始向后三个字符 X 删除当前字符的前一个字符。X=dh dl 删除当前字符， dl=x dh 删除前一个字符 dd 删除当前行 dj 删除上一行 dk 删除下一行 10d 删除当前行开始的10行。 D 删除当前字符至行尾。D=d$ d$ 删除当前字符之后的所有字符（本行） kdgg 删除当前行之前所有行（不包括当前行） jdG（jd shift + g） 删除当前行之后所有行（不包括当前行） :1,10d 删除1-10行 :11,$d 删除11行及以后所有的行 :1,$d 删除所有行 J(shift + j) 删除两行之间的空行，实际上是合并两行。 12.拷贝和粘贴： yy 拷贝当前行 nyy 拷贝当前后开始的n行，比如2yy拷贝当前行及其下一行。 p 在当前光标后粘贴,如果之前使用了yy命令来复制一行，那么就在当前行的下一行粘贴。 shift+p 在当前行前粘贴 :1,10 co 20 将1-10行插入到第20行之后。 :1,$ co $ 将整个文件复制一份并添加到文件尾部。 正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按y即可复制 ddp交换当前行和其下一行 xp交换当前字符和其后一个字符 13.剪切命令： 正常模式下按v（逐字）或V（逐行）进入可视模式，然后用jklh命令移动即可选择某些行或字符，再按d即可剪切 ndd 剪切当前行之后的n行。利用p命令可以对剪切的内容进行粘贴 :1,10d 将1-10行剪切。利用p命令可将剪切后的内容进行粘贴。 :1, 10 m 20 将第1-10行移动到第20行之后。 14.退出命令： :wq 保存并退出 ZZ 保存并退出 :q! 强制退出并忽略所有更改 :e! 放弃所有修改，并打开原来文件。 15.窗口命令： :split或new 打开一个新窗口，光标停在顶层的窗口上 :split file或:new file 用新窗口打开文件 split打开的窗口都是横向的，使用vsplit可以纵向打开窗口。 Ctrl+ww 移动到下一个窗口 Ctrl+wj 移动到下方的窗口 Ctrl+wk 移动到上方的窗口 15.关闭窗口 :close 最后一个窗口不能使用此命令，可以防止意外退出vim。 :q 如果是最后一个被关闭的窗口，那么将退出vim。 ZZ 保存并退出。 关闭所有窗口，只保留当前窗口 :only 录制宏 按q键加任意字母开始录制，再按q键结束录制（这意味着vim中的宏不可嵌套），使用的时候@加宏名，比如qa。。。q录制名为a的宏，@a使用这个宏。 16.执行shell命令： :!command :!ls 列出当前目录下文件 :!perl -c script.pl 检查perl脚本语法，可以不用退出vim，非常方便。 :!perl script.pl 执行perl脚本，可以不用退出vim，非常方便。 :suspend或Ctr - Z 挂起vim，回到shell，按fg可以返回vim。 17.注释命令： perl程序中#开始的行为注释，所以要注释某些行，只需在行首加入# 3,5 s/^/#/g 注释第3-5行 3,5 s/^#//g 解除3-5行的注释 1,$ s/^/#/g 注释整个文档。 :%s/^/#/g 注释整个文档，此法更快。 18.帮助命令： :help or F1 显示整个帮助 :help xxx 显示xxx的帮助，比如 :help i, :help CTRL-[（即Ctrl+[的帮助）。 :help &apos;number&apos; Vim选项的帮助用单引号括起 :help &lt;Esc&gt; 特殊键的帮助用&lt;&gt;扩起 :help -t Vim启动参数的帮助用- ：help i_&lt;Esc&gt; 插入模式下Esc的帮助，某个模式下的帮助用模式_主题的模式 帮助文件中位于||之间的内容是超链接，可以用Ctrl+]进入链接，Ctrl+o（Ctrl + t）返回 19.其他非编辑命令： . 重复前一次命令 :set ruler? 查看是否设置了ruler，在.vimrc中，使用set命令设制的选项都可以通过这个命令查看 :scriptnames 查看vim脚本文件的位置，比如.vimrc文件，语法文件及plugin等。 :set list 显示非打印字符，如tab，空格，行尾等。如果tab无法显示，请确定用set lcs=tab:&gt;-命令设置了.vimrc文件，并确保你的文件中的确有tab，如果开启了expendtab，那么tab将被扩展为空格。 在Windows系统上 :help tutor :syntax 列出已经定义的语法项 :syntax clear 清除已定义的语法规则 :syntax case match 大小写敏感，int和Int将视为不同的语法元素 :syntax case ignore 大小写无关，int和Int将视为相同的语法元素，并使用同样的配色方案","link":"/2020/01/27/%E5%91%BD%E4%BB%A4%E5%B7%A5%E5%85%B7/"},{"title":"js常见问题","text":"break 和 continuebreak 语句可以立即退出循环，阻止再次反复执行任何代码。 continue 语句只是退出当前循环，根据控制表达式还允许继续进行下一次循环 与有标签的语句一起使用: break 语句和 continue 语句都可以与有标签的语句联合使用，返回代码中的特定位置。 123456789101112var iNum = 0;outermost:for (var i=0; i&lt;10; i++) { for (var j=0; j&lt;10; j++) { if (i == 5 &amp;&amp; j == 5) { break outermost; } iNum++; }}alert(iNum); //输出 \"55\" arguments 对象在函数代码中，使用特殊对象 arguments，无需明确指出参数名访问 1.检测参数个数 arguments.length 2.模拟函数重载 1234567891011function doAdd() { if(arguments.length == 1) { alert(arguments[0] + 5); } else if(arguments.length == 2) { alert(arguments[0] + arguments[1]); }} doAdd(10);//输出 \"15\"doAdd(40, 20);//输出 \"60\" 3.Function 对象1.length 属性函数属于引用类型，所以也有属性和方法ECMAScript 可以接受任意多个参数（最多 25 个） 12345678910function doAdd(iNum) { alert(iNum + 10);}function sayHi() { alert(\"Hi\");}alert(doAdd.length);//输出 \"1\"alert(sayHi.length);//输出 \"0\" Function 对象的方法Function 对象也有与所有对象共享的 valueOf() 方法和 toString() 方法。这两个方法返回的都是函数的源代码，在调试时尤其有用 123456789function doAdd(iNum) { alert(iNum + 10);}document.write(doAdd.toString()); // 输出 function doAdd(iNum) { alert(iNum + 10);} js对象1.对象废除 var oObject = new Object; // do something with the object here oObject = null; 注意：废除对象的所有引用时要当心。如果一个对象有两个或更多引用，则要正确废除该对象，必须将其所有引用都设置为 null。 每用完一个对象后，就将其废除，来释放内存，这是个好习惯。这样还确保不再使用已经不能访问的对象，从而防止程序设计错误的出现。 2.String 对象 1).new String() method: toString() , valueOf() , split() // 切分成数组 2).查找某字符是否存在method: 1.indexOf() , lastIndexOf() 如果没有找不到子串，则返回 -1 , 否则返回具体的位置。 2.localeCompare() 判断字符串位置 （ 使用时判断是否大于、等于、小于 0 ） var oStringObject = new String(“yellow”); alert(oStringObject.localeCompare(“brick”)); //输出 “1” 字符串之后 alert(oStringObject.localeCompare(“yellow”)); //输出 “0” 等于 alert(oStringObject.localeCompare(“zoo”)); //输出 “-1” 字符串之前 3.slice() 和 substring() var oStringObject = new String(“hello world”); alert(oStringObject.slice(“3”)); //输出 “lo world” alert(oStringObject.substring(“3”)); //输出 “lo world” alert(oStringObject.slice(“3”, “7”)); //输出 “lo w” alert(oStringObject.substring(“3”, “7”)); //输出 “lo w” 对于负数参数，slice() 方法会用字符串的长度加上参数，substring() 方法则将其作为 0 处理（也就是说将忽略它）。 4.判断类型 instanceof , typeOf var oStringObject = new String(“hello world”); alert(oStringObject instanceof String); //输出 “true 5.Array 对象 1).方法： concat() // 连接两个或更多的数组，并返回结果。 join() // 把数组的所有元素放入一个字符串。元素通过指定的分隔符进行分隔。 push() // 末尾添加新元素 unshift() // 开头增加新元素 shift() // 删除并返回数组的第一个元素 pop() // 删除并返回数组的最后一个元素 slice() // 从某个已有的数组返回选定的元素 splice() // 删除元素，并向数组添加新元素。 sort() // 对数组的元素进行排序 reverse() // 颠倒数组中元素的顺序。 6.boolean false的情况（false，0，“”，null，undefined和NaN ） 作用域1234567891011121314151617181920212223242526272829303132333435363738// var 作用域是 上层函数体(函数及作用域）// let 作用域是 自身函数体（块及作用域)for(var i = 0; i &lt; 5; ++i) { console.log(\"i=\" + i);}for (var j = 0; j &lt; 5; ++j) { setTimeout(()=&gt;{ console.log(\"j=\" + j); }, 1);}for (var m = 0; m &lt; 5; ++m) { (function(n){ setTimeout(()=&gt;{ console.log(\"m=\" + n); }, 1); })(m);}for (var m = 0; m &lt; 5; ++m) { (function(n){ setTimeout(()=&gt;{ console.log(\"m=\" + m); }, 1); })(m);}for(let k = 0; k &lt; 5; ++k) { console.log(\"k=\" + k);}for (let l = 0; l &lt; 5; ++l) { setTimeout(()=&gt;{ console.log(\"l=\" + l); }, 1);}","link":"/2020/01/27/js%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"},{"title":"svn使用技巧","text":"恢复1.恢复一整个目录的文件 svn revert -R . （ . 代表当前 ）2.丢弃对一个文件的修改： svn revert foo.c 拉分支svn cp -r 需要拉到的版本号 -m “pull ios_5.0.0_10969_20171206” svn://116.62.100.209/panda/trunk/client/文件名 svn://116.62.100.209/panda/branches/release/文件名_版本_版本号_时间（例：ios_5.0.0_10969_20171206） 合并版本(需 cd 到 当前分支)svn merge -c 需要合并的版本号 svn://116.62.100.209/panda/trunk/client/文件名 . （ . 代表 当前路径 ）提交：merge from 版本号 trunk 反向合并：svn merge -c -需要合并的版本号 svn://116.62.100.209/panda/trunk/client/文件名 . （ . 代表 当前路径 ） 解决合并后的冲突svn resolved path （ 已过时 ）svn resolved –accept mine-full path （ 1.5版本后，加上–accept参数，尝试自动处理冲突 ） 添加文件svn add 文件名称svn add *.js （添加所有 .js 文件） 提交代码svn ci -m’注释信息’ pathsvn ci -m’注释信息’ ( 提交所有改动的代码 ) ( 可以不写注释 ) 更新到指定版本svn up -r 版本号 path （ 将指定文件还原到指定的版本号 ） 查看文件或者目录状态svn st -v path （ 查看文件或者目录状态 最后 ） 删除文件svn rm -m’注释’ path 查看日志svn log path 查看文件详细信息svn info path 比较差异svn diff -r m:n path ( 比较 指定文件夹 m 和 n 版本的差异 ) 查看文件内容cat path 修改文件内容vi path 更改文件名称svn move old_path_name new_path_name 常见状态 &quot;&quot; 没有修改 &apos;A&apos; 新增 &apos;D&apos; 删除 &apos;M&apos; 修改 &apos;R&apos; 替代 &apos;C&apos; 冲突 &apos;I&apos; 忽略 &apos;?&apos; 未受控 &apos;!&apos; 丢失，一般是将受控文件直接删除导致 设置忽略文件export SVN_EDITOR=vimsvn propedit svn:ignore 需要设置忽略的文件/文件夹 此时在vim中 输入需要忽略的文件夹名称即可 查看最近几条日志svn log -l 10 (查看最近10条日志 l 是小写的 L)","link":"/2020/01/27/svn%E4%BD%BF%E7%94%A8%E6%8A%80%E5%B7%A7/"},{"title":"Hexo 操作指南","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server 简写: hexo s More info: Server Generate static files1$ hexo generate 简写: hexo g More info: Generating Deploy to remote sites1$ hexo deploy 简写: hexo d More info: Deployment","link":"/2019/12/20/hexo%20%E6%93%8D%E4%BD%9C%E6%8C%87%E5%8D%97/"}],"tags":[{"name":"hexo","slug":"hexo","link":"/tags/hexo/"},{"name":"javascript","slug":"javascript","link":"/tags/javascript/"},{"name":"svn","slug":"svn","link":"/tags/svn/"},{"name":"uniapp","slug":"uniapp","link":"/tags/uniapp/"},{"name":"vue","slug":"vue","link":"/tags/vue/"},{"name":"cygwin","slug":"cygwin","link":"/tags/cygwin/"},{"name":"shell","slug":"shell","link":"/tags/shell/"},{"name":"vim","slug":"vim","link":"/tags/vim/"}],"categories":[{"name":"命令","slug":"命令","link":"/categories/%E5%91%BD%E4%BB%A4/"},{"name":"web前端","slug":"web前端","link":"/categories/web%E5%89%8D%E7%AB%AF/"}]}